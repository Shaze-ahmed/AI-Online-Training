import numpy as np


np.genfromtxt("nyc_taxis.csv",delimiter = ",", skip_header= True)

np.arange(10), np.arange(1,10)
np.array([1,2,3]), np.array([[1,2,3],[4,5,6]])     Generating multiple dimensions arrary
np.append(array, array2, axis=0)                   Add new array / values from end of the existing array  np.append(xx, np.sum(xx, axis=1).reshape(4,1), axis=1)
np.insert(array, index, array2, axis=0)	           Insert new array/values into particular index position with axis 0 or 1  np.insert(xx,2 , j, axis=1)
np.delete(array, index, axis=0)                    Delete array values from particular index position with axis 0 or 1 np.delete(xx, 2, axis=0)
x.shape, x.shape[0], x.shape[1]  				   find dimensions of array [axis 0 (rows), 1(columns)]
x.reshape(3,3) ,  np.reshape(x, 4) 				   Change Array into multple dimentions   xx = np.arange(1, 17).reshape(4,4)
np.ravel(array)	                                   convert multi dimension into one dimension
x.flatten('C'), x.flatten('F')                     convert multi dimension into one (Flat) .. 'C' = Row wise 'F' = Columns Wise
np.stack((arr1, arr2)), np.stack((a, b), axis=1)   Join two arrays in one array with multiple dimension
np.dstack((arr1, arr2)), np.vstack, np.hstack      dstack = 3D dimension, vstack = Vertical array, hstack = Horizontal array
a, b, c = np.split(j, 3), dsplit, nsplit, vsplit   split one array into 3 multiple array
k = np.flip(j, axis=1), np.fliplr(x), np.flip(ud)  Flip the array, fliplr (flip left to right), flipud (flip up to down)
np.roll(j, 4)                                      rolling up the array with last 4 to onwards
np.rot90(j, 1)									   rotate the array with anticlock wise
np.sum(x), np.sum(x, axis=1), array[index].sum(axis=1)    Sum the Values of array (axis)
np.mediun(x)  Medium
np.average(x)  Average
np.mean(x)  Mean
np.std(x)   Standard deviation 
np.var(x)   Variance
np.histogram(x)  Histogram
x[0,0] , x[:,0], x[1:2,3:4]	     finding the values from array with index [axis=0, axis=1]  [1:3] indexing start 1 to 3, [1:] indexing 1 onwards
print(xx.shape)
print(xx.ndim)
print(xx.size)
print(xx.dtype)
print(xx.nbytes)
print(xx.T) # Transpose the array values
print(np.inf)
print(np.nan)
print(np.NINF)
print(np.NZERO)
print(np.PZERO)
print(np.e)
print(np.eular_gamma)
print(np.pi)

np.empty([3,3], np.uint8)
array([[116,   0, 101],
       [  0, 108,   0],
       [ 54,   0,  52]], dtype=uint8)
	   
np.eye(5, dtype=np.uint8)
array([[1, 0, 0, 0, 0],
       [0, 1, 0, 0, 0],
       [0, 0, 1, 0, 0],
       [0, 0, 0, 1, 0],
       [0, 0, 0, 0, 1]], dtype=uint8)
	   
np.eye(5, dtype=np.uint8, k=1)
array([[0, 1, 0, 0, 0],
       [0, 0, 1, 0, 0],
       [0, 0, 0, 1, 0],
       [0, 0, 0, 0, 1],
       [0, 0, 0, 0, 0]], dtype=uint8)
	   
np.identity(5, dtype=np.uint8)
array([[1, 0, 0, 0, 0],
       [0, 1, 0, 0, 0],
       [0, 0, 1, 0, 0],
       [0, 0, 0, 1, 0],
       [0, 0, 0, 0, 1]], dtype=uint8)
	   
np.ones((2,5,5), dtype=np.uint16)
array([[[1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1]],

       [[1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1]]], dtype=uint16)
		
np.zeros((2,5,5), dtype=np.uint16)
array([[[0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0]],

       [[0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0]]], dtype=uint16)
		
np.full((3,3,3), dtype = np.int16, fill_value=4)
array([[[4, 4, 4],
        [4, 4, 4],
        [4, 4, 4]],

       [[4, 4, 4],
        [4, 4, 4],
        [4, 4, 4]],

       [[4, 4, 4],
        [4, 4, 4],
        [4, 4, 4]]], dtype=int16)
		
np.tri(3,3, k=0, dtype=np.uint16)  #Triangular
array([[1, 0, 0],
       [1, 1, 0],
       [1, 1, 1]], dtype=uint16)
	   
x = np.ones((5,5), dtype=np.uint16)
y = np.tril(x, k=-1)
array([[0, 0, 0, 0, 0],
       [1, 0, 0, 0, 0],
       [1, 1, 0, 0, 0],
       [1, 1, 1, 0, 0],
       [1, 1, 1, 1, 0]], dtype=uint16)
	   
np.triu(x, k=-1)
array([[1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [0, 1, 1, 1, 1],
       [0, 0, 1, 1, 1],
       [0, 0, 0, 1, 1]], dtype=uint16)

np.linspace(0,10,10)
array([ 0.        ,  1.11111111,  2.22222222,  3.33333333,  4.44444444,
        5.55555556,  6.66666667,  7.77777778,  8.88888889, 10.        ])
		
np.logspace(0,10,10)
array([1.00000000e+00, 1.29154967e+01, 1.66810054e+02, 2.15443469e+03,
       2.78255940e+04, 3.59381366e+05, 4.64158883e+06, 5.99484250e+07,
       7.74263683e+08, 1.00000000e+10])
	   
np.geomspace(0.1,1000,10)
array([1.00000000e-01, 2.78255940e-01, 7.74263683e-01, 2.15443469e+00,
       5.99484250e+00, 1.66810054e+01, 4.64158883e+01, 1.29154967e+02,
       3.59381366e+02, 1.00000000e+03])
	  
np.random.randint(low=0, high=9, size=10)
x = np.random.rand(2,2)
	                    
BITWISE example						
x = np.array([0,9,0,1], np.uint8)
y = np.array([0,3,1,1], np.uint8)
print(np.bitwise_and(x,y))
print(np.bitwise_or(x,y))
print(np.bitwise_xor(x,y))
print(np.bitwise_not(x))

np.dot(arr1, arr2)
np.linalg.multi_dot([arr1, arr2, arr3, arr4])
np.vdot(arr1, arr2)
np.inner(arr1, arr2)

x = np.arange(9).reshape(3,3)
q, r = np.linalg.qr(x)
print('q is ', q, '\n\n\n r is ', r)
print(np.dot(q,r))

np.linalg.det(multi_dim_array)
np.linalg.solve(multi_dim_array)